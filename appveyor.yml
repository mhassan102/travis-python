environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"
    USE_CONDA: true
    TEST_REGISTRY: false
    FLASK_APP: quilt_server
    FLASK_DEBUG: 1
    QUILT_SERVER_CONFIG: dev_config.py
  matrix:

    # Python 2.7.10 is the latest version and is not pre-installed.

    - PYTHON: "C:\\Python27.10"
      PYTHON_VERSION: "2.7.10"
      PYTHON_ARCH: "32"
      MINICONDA: "C:\\Miniconda"
      USE_CONDA: false
      TEST_REGISTRY: true
    #- PYTHON: "C:\\Python27.10-x64"
    #  PYTHON_VERSION: "2.7.10"
    #  PYTHON_ARCH: "64"

init:
  - "ECHO %PYTHON_VERSION% %MINICONDA%"


install:
  - echo $(python --version)
  #- if [%USE_CONDA%]==[true] (
  #    conda create --yes -n quilt_env python=$QPYVER pip
  #    source activate quilt_env
  #    pip install pytest
  #  )
  #  else (
  #    pip install -U pip
  #    pip install --upgrade pip
  #    pip install -U numpy pytest
  #  )
  # Prepend chosen Python to the PATH of this build
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - "SET PATH=%TEST_REGISTRY%;%TEST_REGISTRY%\\Scripts;%PATH%"
  # Check that we have the expected version and architecture for Python
  - "python --version"
  # Install the conda supplied packages if using conda, otherwise use pip
  # The wheel package is needed for 'pip wheel'
  - ps: |
      if($env:PYTHON -match "conda")
      {
        conda update -y conda
        conda install -y pip wheel numpy scipy pyflakes matplotlib flask
        conda create --yes -n quilt_env python=$QPYVER pip
        source activate quilt_env
        pip install pytest
      }
      else
      {
        pip install --upgrade pip
        pip install -U pip
        pip install -U numpy pytest
      }

  - ps: |
      if($env:TEST_REGISTRY -match "true")
      {
        Write-Host "TRUE"
      }
  - travis_retry pip install numpy
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  #- ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "pip install --disable-pip-version-check --user --upgrade pip"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  #- "%CMD_IN_ENV% pip install -r dev-requirements.txt"

build_script:
  # Build the compiled extension
  - "%CMD_IN_ENV% python hello.py"
  - "%CMD_IN_ENV% travis_retry python hello.py"

test_script:
  # Run the project tests
  #- "%CMD_IN_ENV% python setup.py nosetests"

after_test:
  # If tests are successful, create binary packages for the project.
  #- "%CMD_IN_ENV% python setup.py bdist_wheel"
  #- "%CMD_IN_ENV% python setup.py bdist_wininst"
  #- "%CMD_IN_ENV% python setup.py bdist_msi"
  #- ps: "ls dist"

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: dist\*

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#
